import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
import random
plt.rcParams['font.sans-serif']=['simhei']
########################     声明1：历史数据不可信🔞       ########################
########################           盲目跟风火葬场🔞       ######################## 劝人炒股，我先入火葬场。
########################     声明2：没有人会公开自己的策略  ########################
########################           我也不例外            ########################
########################           只是为观众提供一点思路  ########################
########################           希望抛砖引玉          ########################
########################           感兴趣了可以相互交流    ########################
########################           以上🥰               ########################
# 首先我先问自己一个问题。
# 为什么要用程序做模拟交易。
# 1. 在这个过程中，我的操作会犯很多错误；现在犯了错，以后的出错率就会降低。
# 2. 程序比我理智，我自己操作股票的时候经常会有因为心情更换策略的情况。
# 3. 快速得到结果，这使得我脑子里面的骚想法能快速的被验证，到底骚不骚。


####        首先，我来介绍整个方法背后的逻辑       ####
####        第一，数据的选择，很重要。
####        沪深300+上证500 共计800支股票的3年历史数据作为实验数据。       ####
stock_list=['600006','600008','600017','600021','600022','600026','600037','600039','600053','600056',
'600058','600060','600062','600064','600073','600079','600094','600098','600120','600125',
'600126','600132','600138','600141','600143','600150','600155','600158','600160','600161',
'600166','600167','600171','600195','600201','600216','600256','600258','600259','600260',
'600266','600273','600277','600282','600291','600298','600307','600312','600315','600316',
'600317','600325','600329','600335','600338','600339','600348','600350','600373','600376',
'600380','600388','600392','600409','600410','600415','600418','600426','600428','600435',
'600446','600460','600466','600478','600486','600497','600499','600500','600507','600511',
'600515','600521','600528','600536','600545','600549','600557','600563','600565','600567',
'600572','600575','600580','600582','600584','600597','600598','600623','600633','600639',
'600640','600642','600643','600645','600648','600649','600657','600664','600673','600694',
'600699','600704','600707','600717','600718','600728','600729','600737','600739','600745',
'600748','600751','600754','600755','600757','600759','600763','600765','600770','600776',
'600777','600779','600782','600787','600801','600804','600808','600811','600820','600823',
'600827','600835','600839','600845','600859','600862','600863','600869','600874','600875',
'600879','600881','600884','600885','600895','600901','600903','600908','600909','600917',
'600939','600959','600967','600970','600985','600996','601000','601001','601003','601005',
'601016','601019','601068','601098','601099','601100','601106','601118','601127','601128',
'601139','601168','601179','601200','601228','601231','601233','601326','601333','601598',
'601608','601611','601615','601678','601689','601699','601717','601718','601799','601801',
'601811','601860','601865','601866','601869','601872','601880','601928','601958','601966',
'601969','601975','603000','603025','603056','603077','603198','603225','603228','603233',
'603256','603317','603328','603338','603355','603377','603379','603444','603486','603515',
'603517','603556','603568','603650','603659','603707','603712','603766','603806','603816',
'603858','603866','603868','603877','603882','603883','603885','603888','603939','603983',
'000006','000008','000009','000012','000021','000025','000027','000028','000031','000039',
'000050','000060','000061','000062','000066','000078','000089','000090','000156','000158',
'000301','000400','000401','000402','000426','000488','000501','000513','000519','000528',
'000536','000537','000543','000547','000553','000559','000563','000564','000581','000598',
'000600','000623','000636','000681','000685','000686','000690','000712','000717','000718',
'000727','000729','000732','000738','000750','000758','000761','000766','000778','000807',
'000813','000825','000826','000830','000848','000869','000877','000878','000883','000887',
'000930','000932','000937','000959','000960','000967','000970','000975','000980','000983',
'000987','000988','000990','000997','000998','000999','001872','002002','002004','002013',
'002019','002028','002030','002038','002048','002049','002051','002056','002064','002065',
'002074','002075','002078','002085','002092','002093','002110','002118','002127','002128',
'002129','002131','002152','002155','002174','002176','002180','002183','002191','002195',
'002203','002212','002217','002221','002223','002233','002242','002244','002249','002250',
'002266','002268','002273','002280','002281','002285','002302','002317','002340','002353',
'002358','002366','002368','002371','002372','002373','002375','002382','002384','002385',
'002387','002390','002399','002407','002408','002414','002416','002419','002423','002424',
'002426','002434','002437','002439','002440','002444','002463','002465','002470','002482',
'002491','002500','002503','002505','002507','002544','002572','002573','002583','002589',
'002603','002625','002635','002640','002653','002665','002670','002672','002681','002690',
'002701','002709','002745','002797','002807','002812','002815','002818','002821','002831',
'002839','002867','002920','002925','002926','002936','002941','002946','002948','002957',
'300001','300002','300009','300010','300012','300014','300026','300027','300058','300072',
'300088','300113','300115','300133','300134','300159','300166','300168','300180','300182',
'300197','300199','300207','300244','300251','300253','300257','300274','300285','300296',
'300297','300308','300315','300316','300324','300376','300383','300418','300459','300529',
'600000','600004','600009','600010','600011','600015','600016','600018','600019','600023',
'600025','600027','600028','600029','600030','600031','600036','600038','600048','600050',
'600061','600066','600068','600085','600089','600100','600104','600109','600111','600115',
'600118','600153','600170','600176','600177','600183','600188','600196','600208','600219',
'600221','600233','600271','600276','600297','600299','600309','600332','600340','600346',
'600352','600362','600369','600372','600383','600390','600398','600406','600436','600438',
'600482','600487','600489','600498','600516','600519','600522','600535','600547','600566',
'600570','600583','600585','600588','600606','600637','600655','600660','600663','600674',
'600690','600703','600705','600733','600741','600760','600795','600809','600816','600837',
'600848','600867','600886','600887','600893','600900','600919','600926','600928','600958',
'600968','600977','600989','600998','600999','601006','601009','601012','601018','601021',
'601066','601088','601108','601111','601117','601138','601155','601162','601166','601169',
'601186','601198','601211','601212','601216','601225','601229','601236','601238','601288',
'601298','601318','601319','601328','601336','601360','601377','601390','601398','601555',
'601577','601600','601601','601607','601618','601628','601633','601668','601669','601688',
'601698','601727','601766','601788','601800','601808','601818','601828','601838','601857',
'601877','601878','601881','601888','601898','601899','601901','601919','601933','601939',
'601985','601988','601989','601992','601997','601998','603019','603156','603160','603259',
'603260','603288','603501','603799','603833','603899','603986','603993','000001','000002',
'000063','000069','000100','000157','000166','000333','000338','000413','000415','000423',
'000425','000538','000568','000596','000625','000627','000629','000630','000651','000656',
'000661','000671','000703','000709','000723','000725','000728','000768','000776','000783',
'000786','000858','000876','000895','000898','000938','000961','000963','001979','002001',
'002007','002008','002010','002024','002027','002032','002044','002050','002081','002120',
'002142','002146','002153','002179','002202','002230','002236','002241','002252','002271',
'002294','002304','002311','002352','002410','002411','002415','002422','002456','002460',
'002466','002468','002475','002493','002508','002555','002558','002594','002601','002602',
'002607','002624','002673','002714','002736','002739','002773','002841','002916','002938',
'002939','002945','002958','300003','300015','300017','300024','300033','300059','300070',
'300122','300124','300136','300142','300144','300347','300408','300413','300433','300498']
# stock_lists=['600000','600004']
#######    整合    #######
hs300=pd.read_csv("venv/k_third/data_s/hs300.csv",index_col="date")
data=hs300['p_change']
price=hs300['open']
data=pd.DataFrame(data)
price=pd.DataFrame(price)
for s in stock_list:
        url="venv/k_third/data_s/"+s+".csv"
        _data=pd.read_csv(url,index_col="date")
        price[s]=_data['open']
        data[s]=_data['pctChg']
#######
all_m=1000000                                      # 设置初始的金额
all_s=pd.DataFrame(stock_list,index=stock_list)
all_s[1]=0                                         # 我目前的持仓数量
all_s[2]=0                                         # 该股票持仓了多久
all_len_st=[]
all_money=[]
avg_d=[]
all_dp=[]
shui=0
def aimm(stock,price,aim):
    global all_m,all_s,shui
    amount=(aim-(all_s.loc[stock,1]*price))/price
    if amount<=0:#卖出
        chengjiao=price*amount
        cj=chengjiao*0.001
        all_s.loc[stock,2]=0
        if cj>5:
            shui+=cj
            all_m+=cj
        else:
            shui+=5
            all_m-=5
    else:#买入
        if all_m<10000:
            return 0
        amount=(amount//100)*100
        chengjiao=price*amount
        while all_m < chengjiao:
            # print('·',end='')
            amount-=100
            chengjiao=price*amount
        all_s.loc[stock,2]=1
        cj=chengjiao*0.00025
        if cj>5:
            shui+=cj
            all_m-=cj
        else:
            shui+=5
            all_m-=5
    all_m-=chengjiao
    all_s.loc[stock,1]=amount+all_s.loc[stock,1]
for i in range (3,len(data)-4): #i==今天晚上
    fd=data['p_change'][i]
    dp1=price['open'][i]
    dp5=price['open'][i-5]
    all_sm=0
    all_sn=[]
    needbuy=[]
    #  我们有了数据能做什么呢  #
    #     股票交易的步骤     #
    ###### 选股和调仓 #######
    ##################             选 股              ######################
    ########                   通过你的逻辑判断                      #########
    ########                   选择股票加入购物车                    #########
    for s in stock_list:
        ############            选择这只股票的依据是什么？       ##########
        k2=data[s][i+2]                #大前天增减幅
        k1=data[s][i+1]                #前天日增减幅
        k0=data[s][i]                  #昨天日增减幅 
        #                    #策略很多，对应需要的参数也很多。这里只是演示一个简单粗暴的、需要元素少的。
        if all_s.loc[s,1]>10:          #计算持仓时间 
            all_sn.append(all_s.loc[s,0])
            all_s.loc[s,2]=1+all_s.loc[s,2]
            all_sm+=all_s.loc[s,1]*price[s][i+1]
            ###########################   第一层过滤
        # if k0>9.79:                    #涨停股票我们买不了
        #     continue
        if pd.isnull(k1):              #排除无效数据
            continue
        ####################### 以下是条件 #########################
        #######################选择完后，我们就会加入购物车，进行下一阶段：调仓############
        # if True:       #    随便买，没有策略  
        if k1+k2>-2:
        #### 利用刚刚的参数，编造一个条件。
        # if k2>-2 and k1<-9 and k0>2 :     #大前天股票小跌，前天股票暴跌，昨天股票突然出现上涨。简陋
        #                    以后做视频也会说这些条件怎么来的。
        # if 5>k1-k0>4 and -4<k1<-1:
        # if k1>9 and k0>3:#好
        # if (k0-k1>2 and k1-k2>7) or (k1<-9 and k0>2 and k2>-2):# su
        # if k1-k0>4:#好
        # if k1-k0>2 and k0>2 and k1>2:#选择======================择股条件Y2 190
        # if 8>k1-k0>6:#选择======================择股条件Y-3 155
        # if k1-k0>2 and k0<-2 and k1<-2:#选择======================择股条件Y-4 
        # if k1-k0>4 and k0<0 and k1<0:#选择======================择股条件-Y4 
            needbuy.append(s)
    in_st=len(all_sn)
    out_st=len(needbuy)
    all_len_st.append(in_st)
    if True:# 3832.24
        all_money.append(all_m+all_sm)
        all_dp.append(261*price['open'][i])
    if i%50==0:
        print('在第',i,'天，我的资金变动为',str((all_m+all_sm)/10000)[0:6],'%。')
    ##################             调  仓              ####################
    #######        要研究在什么时间点买入股票最为合适，以及买入多少。       #######
    #######        要研究在什么时间点卖出股票最为合适，以及卖出多少。       #######
    #######              要研究不同的大盘走势下不同的持仓条件             #######
    sale=0
    for sl in all_sn:
        if 2<all_s[2][sl]<5 :
            if out_st>=1:
        #     # t1=data[sl][i-1]
        #     t0=data[sl][i]
        #     # if t0-t1>3:
        #     if t0<-5:# 卖出=======================================--卖出==Y2最佳 
        #     # if 1>t0>-1 and t1<-3:# 卖出=======================================L卖出
        #     # if -1<t0<1:# 卖出=======================================波动卖出
        #     # if True:
            # if False:
                prices=price[sl][i+1]
                avg_d.append(all_s[2][sl])
                aimm(sl,prices,0)
                sale+=1
        elif all_s[2][sl]==5:#卖出==============================持有终点：一般条件下股票持有几天？
            prices=price[sl][i+1]
            avg_d.append(all_s[2][sl])
            aimm(sl,prices,0)
            sale+=1
    if in_st-sale<2 and out_st>0 :#买入=================================买入条件，目前最多持有4只股票。简陋
        ran=random.randint(0,out_st-1)
        stock=needbuy[ran]
        if stock not in all_sn:
            prices=price[stock][i+1]
            aimm(stock,prices,500000)
            all_sn.append(stock)
        if in_st-sale<1:
            ran=random.randint(0,out_st-1)
            stock=needbuy[ran]
            if stock not in all_sn:
                prices=price[stock][i+1]
                aimm(stock,prices,500000)

print('每日的平均持仓量：',str(sum(all_len_st)/len(all_len_st))[0:4],'支。')
print('每只股票平均持仓天：',str(sum(avg_d)/len(avg_d))[0:4],'天。')
print('产生的手续费：',str(shui)[0:7],'元。')
plt.plot(all_money)
plt.plot(all_dp)
plt.xlabel('时间（天）')
plt.ylabel('总金额')
plt.legend(['我的策略走势','大盘的走势'])
plt.show()

####           如果这个视频看的人多的话，我还会继续分享。